/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Manage_Component;

import controller.DAO.AttendanceRecordsDAO;
import controller.DAOImp.AttendanceRecordsDAOImp;
import controller.Session.SharedData;
import java.awt.BorderLayout;
import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import model.AttendanceRecords;
import model.Employee;
import model.Period;
import org.hibernate.Session;
import util.HibernateUtil;
import view.component.Attendance_Component.Attendance_Component;
import view.component.Attendance_Component.GridData.Content.Content_Component;
import view.component.KOW_Filter.KOW_Filter_Component;

/**
 *
 * @author LENOVO
 */
public class ManageAttendance_Component extends javax.swing.JPanel {

    private static ManageAttendance_Component instance;
    private Attendance_Component attendance_Component;
    private KOW_Filter_Component kOW_Filter_Component;

    public ManageAttendance_Component() {
        initComponents();
        setLayout();
        initData();
        addComponents();
    }

    public static ManageAttendance_Component getInstance() {
        if (instance == null) {
            instance = new ManageAttendance_Component();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(241, 241, 250));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 354, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initData() {
        attendance_Component = new Attendance_Component();
        kOW_Filter_Component = new KOW_Filter_Component();
    }

    private void addComponents() {
        this.add(kOW_Filter_Component, BorderLayout.WEST);
        this.add(attendance_Component, BorderLayout.CENTER);

    }

    private void setLayout() {
        this.setLayout(new BorderLayout(10, 10));
    }

    public Attendance_Component getAttendance_Component() {
        return attendance_Component;
    }

    public KOW_Filter_Component getkOW_Filter_Component() {
        return kOW_Filter_Component;
    }

    public void updateData(Period period) {
        Map<Employee, List<AttendanceRecords>> employeeAttendanceMap = new HashMap<>();

        boolean hasRecords = false;

        for (Employee employee : SharedData.getInstance().getEmployee_Attendance()) {
            List<AttendanceRecords> attendanceRecordsList = new ArrayList<>();

            for (LocalDate date = period.getStartDate(); !date.isAfter(period.getEndDate()); date = date.plusDays(1)) {
                try (Session session = HibernateUtil.getSessionFactory().openSession()) {
                    AttendanceRecordsDAO attendanceRecordsDAO = new AttendanceRecordsDAOImp(session);

                    Date workDate = convertToDateViaInstant(date);

                    AttendanceRecords attendanceRecords = attendanceRecordsDAO.findByAttendanceInformationAndDate(employee.getAttendanceInformation(), workDate);

                    if (attendanceRecords != null) {
                        attendanceRecordsList.add(attendanceRecords);
                        hasRecords = true; 
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }

            if (!attendanceRecordsList.isEmpty()) {
                employeeAttendanceMap.put(employee, attendanceRecordsList);
            }
        }

        if (!employeeAttendanceMap.isEmpty()) {
            Content_Component.getInstance().updateData(employeeAttendanceMap);
            Content_Component.getInstance().updateEmployee(employeeAttendanceMap);
        } else {
            if (!hasRecords) {
                JOptionPane.showMessageDialog(null, "Không có dữ liệu chấm công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    public Date convertToDateViaInstant(LocalDate dateToConvert) {
        return Date.valueOf(dateToConvert);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
