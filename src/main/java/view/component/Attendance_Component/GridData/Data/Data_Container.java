/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Attendance_Component.GridData.Data;

import java.awt.GridLayout;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import model.AttendanceRecords;
import model.Employee;

/**
 *
 * @author LENOVO
 */
public class Data_Container extends javax.swing.JPanel {

    public Data_Container() {
        initComponents();
        setLayout();
        addComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setLayout() {
        this.setLayout(new GridLayout(0, 7, 0, 0));
    }

    private void addComponents() {
        for (int i = 1; i <= 210; i++) {
            this.add(new Data_Component("Hello"));
        }
    }

    public void updateData(Employee employee, List<AttendanceRecords> records) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

        for (AttendanceRecords record : records) {
            LocalDate workDate = record.getWorkDate().toLocalDate();

            String standardIn = employee.getAttendanceInformation().getStartTime().toString();
            String standardOut = employee.getAttendanceInformation().getEndTime().toString();
            String in = record.getStartTime().toString();
            String out = record.getEndTime().toString();
            String kow = record.getKow() + "W";

            this.add(new Data_Component(workDate.format(dateFormatter)));
            this.add(new Data_Component(convertDayToVietnamese(workDate.getDayOfWeek())));
            this.add(new Data_Component(standardIn));
            this.add(new Data_Component(standardOut));
            this.add(new Data_Component(in));
            this.add(new Data_Component(out));
            this.add(new Data_Component(kow));
        }
        validate();
        repaint();
    }

    public static String convertDayToVietnamese(DayOfWeek dayOfWeek) {
        String vietnameseDayOfWeek;

        switch (dayOfWeek) {
            case MONDAY:
                vietnameseDayOfWeek = "Thứ Hai";
                break;
            case TUESDAY:
                vietnameseDayOfWeek = "Thứ Ba";
                break;
            case WEDNESDAY:
                vietnameseDayOfWeek = "Thứ Tư";
                break;
            case THURSDAY:
                vietnameseDayOfWeek = "Thứ Năm";
                break;
            case FRIDAY:
                vietnameseDayOfWeek = "Thứ Sáu";
                break;
            case SATURDAY:
                vietnameseDayOfWeek = "Thứ Bảy";
                break;
            case SUNDAY:
                vietnameseDayOfWeek = "Chủ Nhật";
                break;
            default:
                vietnameseDayOfWeek = "Ngày không hợp lệ";
                break;
        }

        return vietnameseDayOfWeek;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
