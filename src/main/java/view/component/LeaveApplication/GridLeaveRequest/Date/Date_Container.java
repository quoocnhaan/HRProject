/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.LeaveApplication.GridLeaveRequest.Date;

import view.component.Attendance_Component.GridData.Title.Title_Component;
import java.awt.GridLayout;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import model.DateRange;

/**
 *
 * @author LENOVO
 */
public class Date_Container extends javax.swing.JPanel {

    /**
     * Creates new form Date_Container
     */
    public Date_Container() {
        initComponents();
        setLayout();
        addComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void setLayout() {
        this.setLayout(new GridLayout(1, 0, 0, 0));
    }

    private void addComponents() {
        // Hàm này thêm 7 components với dữ liệu mặc định
        for (int i = 1; i <= 7; i++) {
            this.add(new Date_Component("Thu hai", "17")); // Dữ liệu tĩnh
        }
    }

    public void updateData(DateRange dateRange) {
        this.removeAll();

        LocalDate fromDate = dateRange.getFromDate();
        LocalDate toDate = dateRange.getToDate();

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd");

        LocalDate currentDate = fromDate;
        int count = 1;
        while (!currentDate.isAfter(toDate)) {

            DayOfWeek dayOfWeek = currentDate.getDayOfWeek();

            String thu = getDayOfWeekString(dayOfWeek);

            String day = currentDate.format(dateFormatter);

            this.add(new Date_Component(thu, day));

            currentDate = currentDate.plusDays(1);

            count++;
        }
        for (int i = count; i <= 7; i++) {
            this.add(new Date_Component());
        }

        this.revalidate();
        this.repaint();
    }

    private String getDayOfWeekString(DayOfWeek dayOfWeek) {
        switch (dayOfWeek) {
            case MONDAY:
                return "Thứ hai";
            case TUESDAY:
                return "Thứ ba";
            case WEDNESDAY:
                return "Thứ tư";
            case THURSDAY:
                return "Thứ năm";
            case FRIDAY:
                return "Thứ sáu";
            case SATURDAY:
                return "Thứ bảy";
            case SUNDAY:
                return "Chủ nhật";
            default:
                return "";
        }
    }
}
