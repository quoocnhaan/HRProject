/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Function_Component;

import controller.DAO.FunctionAuthorizationDAO;
import controller.DAO.FunctionDAO;
import controller.DAO.RoleDAO;
import controller.DAOImp.FunctionAuthorizationDAOImp;
import controller.DAOImp.FunctionDAOImp;
import controller.DAOImp.RoleDAOImp;
import controller.Functional.Functional;
import java.awt.Color;
import java.awt.FlowLayout;
import model.Function;
import model.Role;
import org.hibernate.Session;
import util.HibernateUtil;

/**
 *
 * @author LENOVO
 */
public class FunctionData_Component extends javax.swing.JPanel {

    public FunctionData_Component() {
        initComponents();
        setLayout();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setLayout() {
        this.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
    }

    private void initData() {
        try (Session session = HibernateUtil.getSessionFactory().openSession();) {
            RoleDAO roleDAO = new RoleDAOImp(session);
            Role r1 = roleDAO.get(1);

            for (Function function : r1.getFunctions()) {
                String[] colorRGB = function.getColor().split(",");
                Color color = new Color(Integer.parseInt(colorRGB[0]), Integer.parseInt(colorRGB[1]), Integer.parseInt(colorRGB[2]));
                this.add(new Function_Component(function.getFunctionId(), function.getName(), color, Functional.convertByteArrayToIcon(function.getIcon())));
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
